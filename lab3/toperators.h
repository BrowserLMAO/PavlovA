#ifndef OPERATORS_H
#define OPERATORS_H

#include "Ttoken.h"
#include "Toperand.h"

#include <stack>
#include <string>

namespace my {
  // Арность оператора
  enum arity {
    unary = 1,
    binary
  };

  //Приоритет оператора
  enum priority {
    pr1,
    pr2,
    pr3,
    pr4
  };

  ///////////////////////////////////////////////////////////////////////////
  // Абстрактный класс представления операторов /////////////////////////////
  ///////////////////////////////////////////////////////////////////////////

  class operators :
    public token {
    public:

      operators(arity ar, priority pr, const std::string& name);

      // Вычисление значения оператора
      // Количество изъятых из стека операндов определяется арностью оператора
      virtual void operator()(std::stack<token*>& stk) const;

      // Приоритет оператора
      virtual priority prior() const;

      ~operators() = 0;

    protected:

      void throwError(const std::string& msg) const;

      const arity         m_arity;
      const priority      m_priority;
      const std::string   m_name;
  };


  ///////////////////////////////////////////////////////////////////////////
  // Оператор вычисления факториала /////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////

  class factorial :
    public operators {

    public:
      factorial();

      void operator()(std::stack<token*>& stk) const;
  };


  ///////////////////////////////////////////////////////////////////////////
  // Оператор '+' ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////

  class plus:
    public operators {
    public:

      plus();

      void operator()(std::stack<token*>& stk) const;
  };


  ///////////////////////////////////////////////////////////////////////////
  // Оператор '*' ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////

  class mult:
    public operators {
    public:

      mult();

      void operator()(std::stack<token*>& stk) const;
  };


  ///////////////////////////////////////////////////////////////////////////
  // Оператор '/' ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////

  class divide:
    public operators {
    public:

      divide();

      void operator()(std::stack<token*>& stk) const;
  };


  ///////////////////////////////////////////////////////////////////////////
  // Оператор '-' ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////

  class minus:
    public operators {
    public:

      minus();

      void operator()(std::stack<token*>& stk) const;
  };


  ///////////////////////////////////////////////////////////////////////////
  // Оператор '^' ///////////////////////////////////////////////////////////
  ///////////////////////////////////////////////////////////////////////////

  class power:
    public operators {
    public:

      power();

      void operator()(std::stack<token*>& stk) const;
  };
};

#endif
